// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Order.Persistency;

namespace Order.Persistency.Migrations
{
    [DbContext(typeof(OrderContext))]
    [Migration("20180608051828_v3")]
    partial class v3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("orders")
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Order.Domain.BillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Country");

                    b.Property<Guid>("OrderId");

                    b.Property<string>("Phone");

                    b.Property<string>("StateAbbreviation");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("BillingAddress");
                });

            modelBuilder.Entity("Order.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Order.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<string>("Exchange");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderStatus");

                    b.Property<double>("SubTotalAmount");

                    b.Property<double>("TaxValue");

                    b.Property<double>("TotalAmount");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Order.Domain.Product", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("OrderId");

                    b.Property<double>("Amount");

                    b.Property<string>("Exchange");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.HasKey("Id", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Order.Domain.BillingAddress", b =>
                {
                    b.HasOne("Order.Domain.Order")
                        .WithOne("BillingAddress")
                        .HasForeignKey("Order.Domain.BillingAddress", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Order.Domain.Product", b =>
                {
                    b.HasOne("Order.Domain.Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shared.Domain.Money", "Price", b1 =>
                        {
                            b1.Property<Guid?>("ProductId");

                            b1.Property<Guid?>("ProductOrderId");

                            b1.Property<double>("Amount");

                            b1.Property<string>("Exchange");

                            b1.ToTable("Money");

                            b1.HasOne("Order.Domain.Product")
                                .WithOne("Price")
                                .HasForeignKey("Shared.Domain.Money", "ProductId", "ProductOrderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
